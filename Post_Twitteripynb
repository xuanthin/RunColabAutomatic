{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM0M0q00ft60+nnA3BAFhjZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xuanthin/RunColabAutomatic/blob/main/Copy_LinkedinMessages.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "yhokjiMzOgf9"
      },
      "outputs": [],
      "source": [
        "from addon import *\n",
        "import sys\n",
        "# from addon.bot_message.lib_bot import *\n",
        "\n",
        "\n",
        "\n",
        "daily_quota_default = 100\n",
        "min_delay_default = 10\n",
        "\n",
        "\n",
        "def connect_linkedin(browser, url, email, subject, message, file, min_delay):\n",
        "    browser.get(url)\n",
        "    time.sleep(random.uniform(min_delay, min_delay + 3))\n",
        "\n",
        "    #Customize message\n",
        "    try:\n",
        "        panel_left = browser.find_element_by_xpath('//div[contains(@class, \"pv-text-details__left-panel\")]').text\n",
        "        name = panel_left.split('\\n')[0]\n",
        "        for i in [' (He/Him)', ' (She/Her)']:\n",
        "            name = name.replace(i, '')\n",
        "\n",
        "    except:\n",
        "        name = ''\n",
        "        pass\n",
        "\n",
        "    subject = subject.replace('@subject', name)\n",
        "    message = message.replace('@name', name)\n",
        "\n",
        "    #Connect stay in More\n",
        "    element_list = browser.find_elements_by_xpath('//button[contains(@aria-label, \"More actions\")]')\n",
        "    for elementID in element_list:\n",
        "        try:\n",
        "            elementID.click()\n",
        "            break\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "    #Clicks Connect button\n",
        "    element_list = browser.find_elements_by_xpath('//*[text()=\"Connect\"]')\n",
        "    for elementID in element_list:\n",
        "        try:\n",
        "            elementID.click()\n",
        "            break\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "    try:\n",
        "        browser.find_element_by_xpath('//button[contains(@aria-label, \"Connect\")]').click()\n",
        "    except:\n",
        "        pass\n",
        "\n",
        "    time.sleep(2)\n",
        "\n",
        "    try:\n",
        "        browser.find_element_by_xpath('//button[contains(@aria-label, \"Add a note\")]').click()\n",
        "    except:\n",
        "        pass\n",
        "\n",
        "    actions = ActionChains(browser)\n",
        "    for part in message.split('\\n'):\n",
        "        actions.send_keys(part)\n",
        "        actions.key_down(Keys.SHIFT).send_keys(Keys.ENTER).key_up(Keys.SHIFT)\n",
        "        time.sleep(2)\n",
        "\n",
        "    actions.perform()\n",
        "    time.sleep(2)\n",
        "\n",
        "    # Add email to send\n",
        "    try:\n",
        "        browser.find_element_by_name('email').send_keys(email)\n",
        "    except:\n",
        "        pass\n",
        "\n",
        "    send_button = browser.find_element_by_class_name('ml1')\n",
        "\n",
        "    clickable = False\n",
        "    time_wait = time.time()\n",
        "    while not clickable and time.time() < time_wait + implicit_time_default:\n",
        "        try:\n",
        "            cursor = send_button.value_of_css_property('cursor')\n",
        "            if cursor != 'not-allowed':\n",
        "                clickable = True\n",
        "            break\n",
        "        except:\n",
        "            continue\n",
        "\n",
        "    if clickable:\n",
        "        send_button.click()\n",
        "\n",
        "    time.sleep(2)\n",
        "    ActionChains(browser).send_keys(Keys.ESCAPE).perform()\n",
        "\n",
        "    return name\n",
        "\n",
        "\n",
        "def connect_linkedin_via_email(browser, email_list, min_delay):\n",
        "    browser.get('https://www.linkedin.com/mynetwork/import-contacts/iwe/')\n",
        "    time.sleep(random.uniform(min_delay, min_delay + 3))\n",
        "    browser.find_element_by_xpath('//textarea[contains(@name, \"message\")]').click()\n",
        "\n",
        "    actions = ActionChains(browser)\n",
        "    actions.send_keys(email_list)\n",
        "    actions.perform()\n",
        "    time.sleep(2)\n",
        "\n",
        "    browser.find_element_by_xpath('//button[contains(@id, \"send-iwe\")]').click()\n",
        "\n",
        "\n",
        "def send_linkedin(browser, url, email, subject, message, file, min_delay):\n",
        "    browser.get(url)\n",
        "    time.sleep(random.uniform(min_delay, min_delay + 3))\n",
        "\n",
        "    #Check if connected\n",
        "    try:\n",
        "        browser.find_element_by_xpath('//*[text()=\"Remove Connection\"]')\n",
        "    except:\n",
        "        raise Exception('Contact is not connected.')\n",
        "\n",
        "    #Customize message\n",
        "    try:\n",
        "        panel_left = browser.find_element_by_xpath('//div[contains(@class, \"pv-text-details__left-panel\")]').text\n",
        "        name = panel_left.split('\\n')[0]\n",
        "    except:\n",
        "        name = ''\n",
        "        pass\n",
        "\n",
        "    subject = subject.replace('@subject', name)\n",
        "    message = message.replace('@name', name)\n",
        "\t# thêm code ở chổ này\n",
        "    elements=browser.find_elements_by_xpath('//button[contains(@aria-label,\"Message\")]')\n",
        "    button_message= elements[1]\n",
        "    button_message.click()\n",
        "    try:\n",
        "        elementID = browser.find_element_by_xpath('//a[contains(@class, \"app-aware-link\") and contains(@class,\"artdeco-button\") and contains(@class,\"artdeco-button--premium\")]')\n",
        "\n",
        "        if elementID.get_property('href') != 'https://www.linkedin.com/premium/my-premium/':\n",
        "            browser.get(elementID.get_property('href'))\n",
        "            time.sleep(2)\n",
        "\n",
        "            #Attach images\n",
        "            try:\n",
        "                elementID = browser.find_element_by_xpath(\n",
        "                    '//input[@accept=\"image/*,.ai,.psd,.pdf,.doc,.docx,.csv,.zip,.rar,.ppt,.pptx,.pps,.ppsx,'+\n",
        "                    '.odt,.rtf,.xls,.xlsx,.txt,.pub,.html,.7z,.eml\"]'\n",
        "                )\n",
        "                for f in file:\n",
        "                    elementID.send_keys(util.path_media + f)\n",
        "                    time.sleep(2)\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "            try:\n",
        "                browser.find_element_by_xpath('//input[@name=\"subject\"]').send_keys(subject)\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "            browser.find_element_by_xpath('//div[@role=\"textbox\" and @aria-multiline=\"true\"]').click()\n",
        "            # msg-form__contenteditable t-14 t-black--light t-normal flex-grow-1 full-height notranslate\n",
        "\n",
        "\n",
        "            actions = ActionChains(browser)\n",
        "            for part in message.split('\\n'):\n",
        "                actions.send_keys(part)\n",
        "                actions.key_down(Keys.SHIFT).key_down(Keys.ENTER).key_up(Keys.SHIFT).key_up(Keys.ENTER)\n",
        "                time.sleep(2)\n",
        "\n",
        "            actions.perform()\n",
        "            time.sleep(2)\n",
        "\n",
        "            send_button = browser.find_element_by_class_name('msg-form__send-button')\n",
        "\n",
        "            clickable = False\n",
        "            time_wait = time.time()\n",
        "            while not clickable and time.time() < time_wait + implicit_time_default:\n",
        "                try:\n",
        "                    cursor = send_button.value_of_css_property('cursor')\n",
        "                    if cursor != 'not-allowed':\n",
        "                        clickable = True\n",
        "                    break\n",
        "                except:\n",
        "                    continue\n",
        "\n",
        "            if clickable:\n",
        "                send_button.click()\n",
        "\n",
        "    except:\n",
        "        pass\n",
        "\n",
        "\n",
        "    #If Follow is required\n",
        "#        browser.find_element_by_class_name('pv-s-profile-actions--follow').click()\n",
        "\n",
        "    # Connect\n",
        "    # checkSentButton = browser.find_element_by_class_name('ml1')\n",
        "    # if 'artdeco-button--disabled' in checkSentButton.get_attribute('class').split():\n",
        "    #     browser.find_element_by_class_name('artdeco-modal__dismiss').click()\n",
        "    #     browser.find_element_by_class_name('pv-s-profile-actions--message').click()\n",
        "    #     if True == check_exists_class('msg-form__subject'):\n",
        "    #         browser.find_element_by_class_name('msg-form__subject').send_keys(subject)\n",
        "    #     if True == check_exists_class('msg-form__contenteditable'):\n",
        "    #         browser.find_element_by_class_name('msg-form__contenteditable').send_keys(message)\n",
        "    #     if True == check_exists_class('msg-form__send-button'):\n",
        "    #         browser.find_element_by_class_name('msg-form__send-button').click()\n",
        "    # else:\n",
        "    #     checkSentButton.click()\n",
        "\n",
        "    time.sleep(2)\n",
        "    ActionChains(browser).send_keys(Keys.ESCAPE).perform()\n",
        "\n",
        "    return name\n",
        "\n",
        "\n",
        "def disconnect_linkedin(browser, url, min_delay):\n",
        "    browser.get(url)\n",
        "    time.sleep(random.uniform(min_delay, min_delay + 3))\n",
        "\n",
        "    browser.find_element_by_class_name('pv-s-profile-actions__overflow-toggle').click()\n",
        "    time.sleep(2)\n",
        "\n",
        "    browser.find_element_by_class_name('pv-s-profile-actions--disconnect').click()\n",
        "    time.sleep(2)\n",
        "\n",
        "\n",
        "def start_bot_linkedin(browser, output_name, run_succeed, df_message, df_data, df_notsent, func, min_delay, num_export):\n",
        "    df_subject = df_message['SUBJECT']\n",
        "    df_content = df_message['CONTENT']\n",
        "    len_message = len(df_message)\n",
        "    ii = 0\n",
        "    first_result = True\n",
        "\n",
        "    try:\n",
        "        df_file = df_message['FILE']\n",
        "    except:\n",
        "        df_file = pd.DataFrame()\n",
        "\n",
        "    if func == 'connect_via_email':\n",
        "        try:\n",
        "            email_list = ', '.join(df_notsent['EMAIL'])\n",
        "            connect_linkedin_via_email(browser, email_list, min_delay)\n",
        "            df_data.loc[df_notsent.index, 'STATUS'] = 'email_sent'\n",
        "            df_data.loc[df_notsent.index, 'NAME_MODIFIED'] = util.username\n",
        "            df_data.loc[df_notsent.index, 'DATE_MODIFIED'] = datetime.now()\n",
        "\n",
        "        except Exception as e:\n",
        "            df_data.loc[0, 'STATUS'] = e\n",
        "            log.error(f'Connect Linkedin via email __ {e}')\n",
        "            pass\n",
        "\n",
        "    else:\n",
        "        for idx, row in df_notsent.iterrows():\n",
        "            time_start = time.time()\n",
        "            df_data.loc[idx, 'NAME_MODIFIED'] = util.username\n",
        "            df_data.loc[idx, 'DATE_MODIFIED'] = datetime.now()\n",
        "\n",
        "            subject = df_subject[ii]\n",
        "            message = df_content[ii]\n",
        "            try:\n",
        "                file = df_file[ii].split(', ')\n",
        "            except:\n",
        "                file = []\n",
        "                pass\n",
        "\n",
        "            ii += 1\n",
        "            if ii == len_message: #reset to first content\n",
        "                ii = 0\n",
        "\n",
        "            try:\n",
        "                url = row['LINKEDIN']\n",
        "                email = row['EMAIL']\n",
        "                status = row['STATUS']\n",
        "\n",
        "                if status != 'sent' and func == 'connect':\n",
        "                    name = connect_linkedin(browser, url, email, subject, message, file, min_delay)\n",
        "                    df_data.loc[idx, 'NAME'] = name\n",
        "                    df_data.loc[idx, 'STATUS'] = 'sent'\n",
        "\n",
        "                if status != 'sent' and func == 'send':\n",
        "                    name = send_linkedin(browser, url, email, subject, message, file, min_delay)\n",
        "                    df_data.loc[idx, 'NAME'] = name\n",
        "                    df_data.loc[idx, 'STATUS'] = 'sent'\n",
        "\n",
        "                if status != 'disconnected' and func == 'disconnect':\n",
        "                    disconnect_linkedin(browser, url, min_delay)\n",
        "                    df_data.loc[idx, 'STATUS'] = 'disconnected'\n",
        "\n",
        "                run_succeed += 1\n",
        "\n",
        "                #Sleep to make sure everything loads\n",
        "                time.sleep(random.uniform(min_delay + 3, min_delay + 7))\n",
        "\n",
        "            except Exception as e:\n",
        "                df_data.loc[idx, 'STATUS'] = e\n",
        "                log.error(f'[{idx}] {url} __ {e}')\n",
        "                pass\n",
        "\n",
        "            if first_result is True:\n",
        "                log.printt('[%s] %s: %s __ %s' % (idx, row['LINKEDIN'], func, time.time() - time_start))\n",
        "                first_result = False\n",
        "\n",
        "            if idx != df_notsent.index[-1]:\n",
        "                if (idx + 1) % num_export == 0:\n",
        "                    [os.remove(os.path.join(util.path_output, f)) for f in os.listdir(util.path_output)\n",
        "                        if f.find(output_name) != -1]\n",
        "                    path_user = util.path_output + output_name + '__temp_%s.xlsx' % (idx + 1)\n",
        "                    export_file(df_data, path_user)\n",
        "\n",
        "            else:\n",
        "                # remove all temp output\n",
        "                log.printt('Remove all temporary outputs.')\n",
        "                [os.remove(os.path.join(util.path_output, f)) for f in os.listdir(util.path_output)\n",
        "                    if f.find(output_name) != -1]\n",
        "\n",
        "    browser.quit()\n",
        "\n",
        "    return run_succeed, df_data\n",
        "\n",
        "\n",
        "def run_linkedin_message(username, password, filename=None, headless=True, num_run=daily_quota_default,\n",
        "        daily_quota=daily_quota_default, ignore_error=False, min_delay=min_delay_default, func='connect_via_email', num_export=50):\n",
        "    service = 'run_linkedin_message'\n",
        "    run_succeed = 0\n",
        "\n",
        "    lib_sys.init_log()\n",
        "    path, filename = get_path_from_filename(filename)\n",
        "    output_name = filename.split('.xlsx')[0]\n",
        "\n",
        "    df_message, df_data, df_notsent, \\\n",
        "        df_limit, daily_sent = read_data_message(username, path, service, num_run, ignore_error, daily_quota)\n",
        "\n",
        "    browser = init_browser(headless=headless)\n",
        "    try:\n",
        "        login_linkedin(browser, username, password)\n",
        "    except:\n",
        "        return\n",
        "\n",
        "    if func == 'send':\n",
        "        log.printt('Linkedin Bot: START sending..\\n')\n",
        "    elif func == 'disconnect':\n",
        "        log.printt('Linkedin Bot: START disconnecting..\\n')\n",
        "    else:\n",
        "        log.printt('Linkedin Bot: START connecting..\\n')\n",
        "\n",
        "    run_succeed, df_data = start_bot_linkedin(browser, output_name, run_succeed, df_message, df_data,\n",
        "                               df_notsent, func, min_delay, num_export)\n",
        "\n",
        "    #Switch content\n",
        "    df_message = df_message.apply(np.roll, shift = 1)\n",
        "\n",
        "    #Update data log\n",
        "    update_log_limit(df_limit, username, run_succeed, daily_sent)\n",
        "\n",
        "    #Update results\n",
        "    export_data_message(path, df_message, df_data)\n",
        "\n",
        "    log.printt('Linkedin Bot: DONE.')\n",
        "\n",
        "    return '\\nLog file: %slatest.log' % (util.path_log)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install addon\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KfYcOvXwPCk8",
        "outputId": "32752f27-0edd-4857-8d83-70af2c95c5a1"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting addon\n",
            "  Downloading addon-0.0.2.tar.gz (1.1 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: addon\n",
            "  Building wheel for addon (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for addon: filename=addon-0.0.2-py3-none-any.whl size=1366 sha256=a226b89a4c24e2edcfce795cb211942f91546bf83b93e3c80765ca98a4a97049\n",
            "  Stored in directory: /root/.cache/pip/wheels/dc/65/a1/ffff77349a9f8c2d12ff166578d5119d808eff1d9b662e2b97\n",
            "Successfully built addon\n",
            "Installing collected packages: addon\n",
            "Successfully installed addon-0.0.2\n"
          ]
        }
      ]
    }
  ]
}
